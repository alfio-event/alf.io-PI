import java.time.ZoneId
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter
import org.apache.tools.ant.filters.ReplaceTokens

/*
 * This file is part of alf.io.
 *
 * alf.io is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * alf.io is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.
 */
buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'net.researchgate.release' version '2.8.1'
    id "nebula.ospackage" version "9.0.0"
    id "org.springframework.boot" version "2.6.2"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "org.jetbrains.kotlin.jvm" version "1.6.10"
    id "org.jetbrains.kotlin.plugin.spring" version "1.6.10"
}

ext {
    getVersionName = {
        def currentVersion = project.version.toString()
        if(currentVersion.contains("SNAPSHOT")) {
            "0.9.10"
        } else {
            currentVersion
        }
    }

    getBuildNumber = {
        if(project.version.toString().contains("SNAPSHOT")) {
            "99"
        } else {
            "1"
        }
    }
}

java {
    disableAutoTargetJvm()
}

apply plugin: 'kotlin'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

jar {
    archiveBaseName.set('alfio-pi')
    version = "${project.version}"
}
jar.dependsOn(":frontend:jar")

processResources.doLast {

    final gradleProperties = new File(( File ) it.destinationDir, 'application.properties' )

    assert gradleProperties.file

    final properties = new Properties()
    gradleProperties.withReader { properties.load( it ) }
    properties[ 'alfio.version' ] = project.version
    properties[ 'alfio.build-ts' ] = ZonedDateTime.now(ZoneId.of("UTC")).format(DateTimeFormatter.ISO_ZONED_DATE_TIME)
    gradleProperties.withWriter { properties.store( it, null )}
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
    compile.exclude module: "jackson-core"
    compile.exclude module: "jackson-databind"
    compile.exclude module: "hibernate-validator"
}

dependencies {
    implementation('org.flywaydb:flyway-core')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-websocket')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-jetty')
    implementation('org.springframework:spring-tx')
    implementation('org.springframework:spring-jdbc')
    implementation('com.zaxxer:HikariCP')
    implementation('ch.digitalfondue.npjt-extra:npjt-extra:2.0.4')
    implementation('org.apache.pdfbox:pdfbox:2.0.24')
    implementation('com.google.zxing:core:3.4.1')
    implementation('com.google.zxing:javase:3.4.1')
    implementation('com.squareup.okhttp3:okhttp:4.9.3')
    implementation('com.google.code.gson:gson:2.8.9')
    implementation('org.bouncycastle:bcpkix-jdk15on:1.69')
    implementation('ch.digitalfondue.synckv:synckv:0.6.0')
    implementation('org.jmdns:jmdns:3.5.7')
    runtimeOnly('org.hsqldb:hsqldb')
    runtimeOnly project(':frontend')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0')
    compile("org.springframework.boot:spring-boot-configuration-processor")
}

bootRun {
    final properties = new Properties(System.properties)
    properties[ 'alfio.version' ] = project.version
    properties[ 'alfio.build-ts' ] = ZonedDateTime.now(ZoneId.of("UTC")).format(DateTimeFormatter.ISO_ZONED_DATE_TIME)
    systemProperties properties
    //jvmArgs = ["-DopenDBConsole=true"]
    //jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005" ]
}

compileJava.dependsOn(processResources)

release {
    tagTemplate = 'v$version'
    buildTasks = ['generateScript']
    git {
        requireBranch = ''
        pushToRemote = 'origin'
        signTag = true
    }
}

def CONFIG_DIR = 'home/pi/.config/alf.io'
def CONFIG_FILE = "${CONFIG_DIR}/application.properties".toString()
def HOME_DIR = 'opt/alf.io'
def UTILS_DIR = "${HOME_DIR}/utils".toString()
def TOKENS = [
    ALFIO_VERSION: getVersionName(),
    ALFIO_BUILDNUM: getBuildNumber(),
    ALFIO_CONFIG_DIR: "/${CONFIG_DIR}".toString(),
    ALFIO_CONFIG_FILE: "/${CONFIG_FILE}".toString(),
    ALFIO_HOME_DIR: "/${HOME_DIR}".toString(),
    ALFIO_APP_DIR: "/${HOME_DIR}/app".toString(),
    ALFIO_UTILS_DIR: "/${UTILS_DIR}".toString()
]

task packageDeb(type: Deb) {
    packageName 'alf.io-pi'
    version getVersionName().toString()
    release getBuildNumber()
    user 'pi'
    group 'pi'
    configurationFile("/${CONFIG_FILE}")

    requires('nginx')
    requires('cups-bsd')
    requires('cups')
    requires('chromium-browser')
    requires('printer-driver-dymo')
    requires('openjdk-9-jdk')

    preInstall file('deb/scripts/preInstall.sh')
    preUninstall file('deb/scripts/preUninstall.sh')
    postInstall file('deb/scripts/postInstall.sh')

    into '/'
    from('deb/resources/etc') {
        into 'etc'
        filter(ReplaceTokens, tokens: TOKENS)
        fileMode=0644
        user "root"
    }
    from('deb/resources/opt/alf.io/util') {
        into UTILS_DIR
        createDirectoryEntry = true
        fileMode=0775
        filter(ReplaceTokens, tokens: TOKENS)
    }
    from('deb/resources/var') {
        into 'var'
    }
    from('deb/resources/home-pi-config') {
        into 'home/pi/.config'
    }
    from('application.properties.sample') {
        into CONFIG_DIR
        createDirectoryEntry = true
    }

    from(jar.outputs.files) {
        createDirectoryEntry = true
        into 'opt/alf.io/app'
        rename {
            "alf.io-PI-${getVersionName()}-boot.jar"
        }
    }

    from('deb/resources/opt/alf.io/app') {
        into 'opt/alf.io/app'
        rename {
            "alf.io-PI-${getVersionName()}-boot.conf"
        }
    }

    link("/${HOME_DIR}/app/alfio-boot.jar", "/${HOME_DIR}/app/alf.io-PI-${getVersionName()}-boot.jar")
    link("/etc/nginx/sites-enabled/alfio-pi", "/etc/nginx/sites-available/alfio-pi")
}

packageDeb.dependsOn(build)

task generateScript(type: Copy) {
    from 'etc/get-alfio-pi.sh'
    into "${buildDir}/distributions"
    filter(ReplaceTokens, tokens: TOKENS)
}
generateScript.dependsOn(packageDeb)
