import java.time.ZoneId
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

/*
 * This file is part of alf.io.
 *
 * alf.io is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * alf.io is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.
 */
buildscript {
    ext {
        kotlinVersion = '1.2.31'
        springBootVersion = '1.5.12.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
    }
}

configure(allprojects) {
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'
}

apply plugin: 'kotlin'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

jar {
    baseName = 'alfio-pi'
    version = "${project.version}"
}
jar.dependsOn(":frontend:jar")

processResources.doLast {

    final gradleProperties = new File(( File ) it.destinationDir, 'application.properties' )

    assert gradleProperties.file

    final properties = new Properties()
    gradleProperties.withReader { properties.load( it ) }
    properties[ 'alfio.version' ] = project.version
    properties[ 'alfio.build-ts' ] = ZonedDateTime.now(ZoneId.of("UTC")).format(DateTimeFormatter.ISO_ZONED_DATE_TIME)
    gradleProperties.withWriter { properties.store( it, null )}
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
    compile.exclude module: "jackson-core"
    compile.exclude module: "jackson-databind"
    compile.exclude module: "hibernate-validator"
}

dependencies {
    compile('org.flywaydb:flyway-core')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-websocket')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-jetty')
    compile('org.springframework:spring-tx')
    compile('org.springframework:spring-jdbc')
    compile('com.zaxxer:HikariCP:2.7.8')
    compile('ch.digitalfondue.npjt-extra:npjt-extra:1.1.4')
    compile("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
    compile("org.apache.pdfbox:pdfbox:2.0.9")
    compile("com.google.zxing:core:3.3.0")
    compile("com.google.zxing:javase:3.3.0")
    compile("com.squareup.okhttp3:okhttp:3.10.0")
    compile("com.google.code.gson:gson:2.8.2")
    compile("org.bouncycastle:bcpkix-jdk15on:1.59")
    compile('ch.digitalfondue.synckv:synckv:0.1.6')
    compile('org.jmdns:jmdns:3.5.4')
    runtime('org.hsqldb:hsqldb')
    runtime project(':frontend')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    optional("org.springframework.boot:spring-boot-configuration-processor")
}

bootRun {
    final properties = new Properties(System.properties)
    properties[ 'alfio.version' ] = project.version
    properties[ 'alfio.build-ts' ] = ZonedDateTime.now(ZoneId.of("UTC")).format(DateTimeFormatter.ISO_ZONED_DATE_TIME)
    systemProperties properties
    //jvmArgs = ["-DopenDBConsole=true"]
    //jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005" ]


}

springBoot {
    executable = true
}
compileJava.dependsOn(processResources)


